#!/usr/bin/perl -w
################################################################################

use strict;
use Data::Dumper;

my $length = 256 * 200;
my $range = 256 * 20;

################################################################################

sub sign($)
{
  my ($val) = @_;
  return $val >= 0 ? '+' : '-';
}

sub value($)
{
  my ($val) = @_;
  $val = abs $val;
  return $val < $range ? $val : $range - 1;
}

sub cmd($$$@)
{
  my ($line, $adr, $cmd, $dst, $src, $val) = @_;
  $dst = defined $dst ? $dst - $adr : 0;
  $src = defined $src ? $src - $adr : 0;
  $val = defined $val ? $val - $adr : 0
    if ($cmd == 12 || $cmd == 13); # cpi cpy
  printf "%03x: %02x %s%04x %s%04x %s%04x\n", $line, $cmd,
    sign $dst, value $dst, sign $src, value $src, sign $val, value $val;
}

################################################################################

my $adr = 0;
my %label;
my @label;
my @code;

while (<>)
{
  chop;
  s/#.*//;
  s/\s+/ /g;
  s/^ //;
  s/ $//;
  next
    unless $_;

  if (/^(\w+):$/)
  {
    die "$.: label already defined: $1\n"
      if (exists $label{$1});
    $label{$1} = $adr;
  }
  elsif (/^(\w+) = (\d+)$/)
  {
    die "$.: label already defined: $1\n"
      if (exists $label{$1});
    $label{$1} = $2;
  }
  elsif (/^(\w+) = (.+)$/)
  {
    die "$.: label already defined: $1\n"
      if (exists $label{$1});
    push @label, [ $., $1, $2 ];
  }
  elsif (/^(\w\w\w)$/)
  {
    push @code, [ $., $adr, $1 ];
    $adr++;
  }
  elsif (/^(\w\w\w) (.*)$/)
  {
    push @code, [ $., $adr, $1, split ',', $2 ];
    $adr++;
  }
  else
  {
    die "$.: invalid line: $_\n";
  }
}

################################################################################

foreach my $label (@label)
{
  while (my ($key, $val) = each(%label))
  {
    $label->[2] =~ s/\b$key\b/$val/g;
  }

  local $SIG{__WARN__} = sub { };
  my $val = eval $label->[2];
  die $label->[0], ": invalid expression: ", $label->[2], "\n"
    unless (defined $val);
  $label{$label->[1]} = $val;
}

foreach my $code (@code)
{
  foreach (3 .. 5)
  {
    last
      unless (defined $code->[$_]);

    next
      if ($code->[$_] =~ /^\d+$/);

    while (my ($key, $val) = each(%label))
    {
      $code->[$_] =~ s/\b$key\b/$val/g;
    }

    local $SIG{__WARN__} = sub { };
    my $val = eval $code->[$_];
    die $code->[0],  ": invalid expression: ", $code->[$_], "\n"
      unless (defined $val);

    $code->[$_] = $val;
  }
}

################################################################################

foreach my $code (@code)
{
  my ($line, $adr, $cmd, @arg) = @{$code};

  if ($cmd eq 'dat' && @arg == 0)
  {
    cmd $line, $adr, 0, undef, undef, 0;
  }
  elsif ($cmd eq 'dat' && @arg == 1)
  {
    cmd $line, $adr, 0, undef, undef, @arg;
  }
  elsif ($cmd eq 'frk' && @arg == 1)
  {
    cmd $line, $adr, 1, @arg, undef, 0;
  }
  elsif ($cmd eq 'jmp' && @arg == 1)
  {
    cmd $line, $adr, 2, @arg, undef, 0;
  }
  elsif ($cmd eq 'jlt' && @arg == 3)
  {
    cmd $line, $adr, 3, @arg;
  }
  elsif ($cmd eq 'jle' && @arg == 3)
  {
    cmd $line, $adr, 4, @arg;
  }
  elsif ($cmd eq 'jgt' && @arg == 3)
  {
    cmd $line, $adr, 5, @arg;
  }
  elsif ($cmd eq 'jge' && @arg == 3)
  {
    cmd $line, $adr, 6, @arg;
  }
  elsif ($cmd eq 'jeq' && @arg == 3)
  {
    cmd $line, $adr, 7, @arg;
  }
  elsif ($cmd eq 'jne' && @arg == 3)
  {
    cmd $line, $adr, 8, @arg;
  }
  elsif ($cmd eq 'set' && @arg == 2)
  {
    cmd $line, $adr, 9, $arg[0], undef, $arg[1];
  }
  elsif ($cmd eq 'inc' && @arg == 1)
  {
    cmd $line, $adr, 10, @arg, undef, 1;
  }
  elsif ($cmd eq 'inc' && @arg == 2)
  {
    cmd $line, $adr, 10, $arg[0], undef, $arg[1];
  }
  elsif ($cmd eq 'dec' && @arg == 1)
  {
    cmd $line, $adr, 11, @arg, undef, 1;
  }
  elsif ($cmd eq 'dec' && @arg == 2)
  {
    cmd $line, $adr, 11, $arg[0], undef, $arg[1];
  }
  elsif ($cmd eq 'cpi' && @arg == 3)
  {
    cmd $line, $adr, 12, @arg;
  }
  elsif ($cmd eq 'cpy' && @arg == 3)
  {
    cmd $line, $adr, 13, @arg;
  }
  else
  {
    die "$.: invalid command: $cmd\n"
  }
}

################################################################################
