################################################################################

width = 256
step = 12
range = 18 * width

dist = 19 * width
dst1 = src1 + dist
len1 = end1 - src1

dst2 = src2 + dist
len2 = end2 - src2

num = 10

################################################################################

# place fork loops forward

src1:
  set idx, step
loop1:
  cpi end, trap, idx
  cpi end + 1, trap + 1, idx

  cpi end + step, trap, idx
  cpi end + 1 + step, trap + 1, idx

  cpi end + 2 * step, trap, idx
  cpi end + 1 + 2 * step, trap + 1, idx

  cpi end + 3 * step, trap, idx
  cpi end + 1 + 3 * step, trap + 1, idx

  inc idx, 4 * step
  jlt loop1, idx, range

################################################################################

# copy forward

  # decrement copy counter
  dec cnt

  set idx, 0
copy1:
  cpy dst1, src1, idx
  cpy dst1 + 1, src1 + 1, idx

  inc idx, 2
  jlt copy1, idx, len1

  # jump to the copy for one round
  jgt dst1, cnt, 0
  # jump to the original after one round
  jmp jump + dist

jump:
  jmp src2 + 10 * width

cnt:
  dat num

trap:
  # fork loop to copy
  frk trap
  jmp trap
end1:

################################################################################

# clear everything

src2:
  # clear forward
  set idx, step
loop2:
  cpi end, idx, idx
  cpi end + step, idx, idx
  cpi end + 2 * step, idx, idx

  inc idx, 3 * step
  jlt loop2, idx, range

  # copy forward
  set idx, 0
copy2:
  cpy dst2, src2, idx
  cpy dst2 + 1, src2 + 1, idx

  inc idx, 2
  jlt copy2, idx, len2

  # jump to the copy
  jmp dst2
end2:

idx:
  dat
end:

################################################################################
