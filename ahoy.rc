################################################################################

width = 256
dist = 14 * width + 99

dst = src + dist
len = end - src

################################################################################

# write 'AHOY' pattern into memory

src:
  set end + 128 + 0 * 256 + 1, 0
  set end + 128 + 0 * 256 + 4, 0
  set end + 128 + 0 * 256 + 1, 0
  set end + 128 + 0 * 256 + 6, 0
  set end + 128 + 0 * 256 + 1, 0
  set end + 128 + 0 * 256 + 9, 0
  set end + 128 + 0 * 256 + 12, 0
  set end + 128 + 0 * 256 + 14, 0
  set end + 128 + 1 * 256 + 0, 0
  set end + 128 + 1 * 256 + 2, 0
  set end + 128 + 1 * 256 + 4, 0
  set end + 128 + 1 * 256 + 6, 0
  set end + 128 + 1 * 256 + 8, 0
  set end + 128 + 1 * 256 + 10, 0
  set end + 128 + 1 * 256 + 12, 0
  set end + 128 + 1 * 256 + 14, 0
  set end + 128 + 2 * 256 + 0, 0
  set end + 128 + 2 * 256 + 1, 0
  set end + 128 + 2 * 256 + 2, 0
  set end + 128 + 2 * 256 + 4, 0
  set end + 128 + 2 * 256 + 5, 0
  set end + 128 + 2 * 256 + 6, 0
  set end + 128 + 2 * 256 + 8, 0
  set end + 128 + 2 * 256 + 10, 0
  set end + 128 + 2 * 256 + 13, 0
  set end + 128 + 3 * 256 + 0, 0
  set end + 128 + 3 * 256 + 2, 0
  set end + 128 + 3 * 256 + 4, 0
  set end + 128 + 3 * 256 + 6, 0
  set end + 128 + 3 * 256 + 9, 0
  set end + 128 + 3 * 256 + 13, 0

################################################################################

# copy forward

  set count, 0
loop:
  cpy dst, src, count
  inc count
  cpy dst, src, count
  inc count
  jlt loop, count, len
  jmp dst
end:

count:
  dat

################################################################################
